digraph sw_window_exists {
label="sw_window_exists"
64026 [label="N64026\n(rp:0, ep:0)\nexit", shape="doublecircle"]
64027 [label="N64027\n(rp:31, ep:31)\nentry", shape="doublecircle"]
64027 -> 64029 [label="%2 = alloca i32, align 4"]
64029 [label="N64029\n(rp:30, ep:30)", shape="circle"]
64029 -> 64030 [label="%3 = alloca i64, align 8"]
64030 [label="N64030\n(rp:29, ep:29)", shape="circle"]
64030 -> 64031 [label="%4 = alloca %struct._seamless_window*, align 8"]
64031 [label="N64031\n(rp:28, ep:28)", shape="circle"]
64031 -> 64032 [label="%5 = alloca i8*, align 8"]
64032 [label="N64032\n(rp:27, ep:27)", shape="circle"]
64032 -> 64033 [label="%6 = alloca i32, align 4"]
64033 [label="N64033\n(rp:26, ep:26)", shape="circle"]
64033 -> 64038 [label="store i64 %0, i64* %3, align 8"]
64038 [label="N64038\n(rp:25, ep:25)", shape="circle"]
64038 -> 64039 [label="store i32 0, i32* %6, align 4"]
64039 [label="N64039\n(rp:24, ep:24)", shape="circle"]
64039 -> 64040 [label="%7 = load i64, i64* %3, align 8"]
64040 [label="N64040\n(rp:23, ep:23)", shape="circle"]
64040 -> 64041 [label="sw_get_window_by_id --@-- %8 = call %struct._seamless_window* @sw_get_window_by_id(i64 %7)", style="dashed", color="blue"]
64041 [label="N64041\n(rp:22, ep:22)", shape="circle"]
64041 -> 64042 [label="store %struct._seamless_window* %8, %struct._seamless_window** %4, align 8"]
64042 [label="N64042\n(rp:21, ep:21)", shape="circle"]
64042 -> 64043 [label="%9 = load %struct._seamless_window*, %struct._seamless_window** %4, align 8"]
64043 [label="N64043\n(rp:20, ep:20)", shape="circle"]
64043 -> 64044 [label="%10 = icmp ne %struct._seamless_window* %9, null"]
64044 [label="N64044\n(rp:19, ep:19)", shape="circle"]
64044 -> 64066 [label="[%10 = icmp ne %struct._seamless_window* %9, null]"]
64044 -> 64067 [label="[!(%10 = icmp ne %struct._seamless_window* %9, null)]"]
64048 [label="N64048\n(rp:16, ep:16)", shape="circle"]
64048 -> 64049 [label="%13 = load %struct._XDisplay*, %struct._XDisplay** @g_display, align 8"]
64049 [label="N64049\n(rp:15, ep:15)", shape="circle"]
64049 -> 64050 [label="%14 = load %struct._seamless_window*, %struct._seamless_window** %4, align 8"]
64050 [label="N64050\n(rp:14, ep:14)", shape="circle"]
64050 -> 64051 [label="%15 = getelementptr inbounds %struct._seamless_window, %struct._seamless_window* %14, i32 0, i32 0"]
64051 [label="N64051\n(rp:13, ep:13)", shape="circle"]
64051 -> 64052 [label="%16 = load i64, i64* %15, align 8"]
64052 [label="N64052\n(rp:12, ep:12)", shape="circle"]
64052 -> 64053 [label="%17 = call i32 @XFetchName(%struct._XDisplay* %13, i64 %16, i8** %5)"]
64053 [label="N64053\n(rp:11, ep:11)", shape="circle"]
64053 -> 64054 [label="store i32 %17, i32* %6, align 4"]
64054 [label="N64054\n(rp:10, ep:10)", shape="circle"]
64054 -> 64055 [label="store i32 0, i32* @g_error_expected, align 4"]
64055 [label="N64055\n(rp:9, ep:9)", shape="circle"]
64055 -> 64056 [label="%18 = load i32, i32* %6, align 4"]
64056 [label="N64056\n(rp:8, ep:8)", shape="circle"]
64056 -> 64057 [label="%19 = icmp ne i32 %18, 0"]
64057 [label="N64057\n(rp:7, ep:7)", shape="circle"]
64057 -> 64068 [label="[%19 = icmp ne i32 %18, 0]"]
64057 -> 64061 [label="[!(%19 = icmp ne i32 %18, 0)]"]
64059 [label="N64059\n(rp:5, ep:5)", shape="circle"]
64059 -> 64061 [label="%22 = call i32 @XFree(i8* %21)"]
64061 [label="N64061\n(rp:4, ep:4)", shape="circle"]
64061 -> 64062 [label="%24 = load i32, i32* %6, align 4"]
64062 [label="N64062\n(rp:3, ep:3)", shape="circle"]
64062 -> 64064 [label="store i32 %24, i32* %2, align 4"]
64064 [label="N64064\n(rp:2, ep:2)", shape="circle"]
64064 -> 64065 [label="%26 = load i32, i32* %2, align 4"]
64065 [label="N64065\n(rp:1, ep:1)", shape="circle"]
64065 -> 64026 [label="ret i32 %26"]
64066 [label="N64066\n(rp:17, ep:17)", shape="circle"]
64066 -> 64048 [label="store i32 1, i32* @g_error_expected, align 4"]
64067 [label="N64067\n(rp:18, ep:18)", shape="circle"]
64067 -> 64064 [label="store i32 0, i32* %2, align 4"]
64068 [label="N64068\n(rp:6, ep:6)", shape="circle"]
64068 -> 64059 [label="%21 = load i8*, i8** %5, align 8"]
}
